name: pulsebridge-app build and test

on: [push, pull_request]

env:
  ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
  ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
  ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
  ANDROID_KEYSTORE_PATH: ${{ secrets.ANDROID_KEYSTORE_PATH }}

jobs:
  test:
    name: Test
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
     # - name: Decrypt keystore
     #   run: openssl aes-256-cbc -K ${{ secrets.ANDROID_KEYSTORE_SSL_KEY }} -iv ${{ secrets.ANDROID_KEYSTORE_SSL_IV }} -in pulsebridge.jks.enc -out pulsebridge.jks -d
      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-26-default
      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 26
          target: default
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Run unit tests
        run: make test
      - name: Archive results
        uses: actions/upload-artifact@v4
        with:
          name: Test report
          path: |
            build/reports/
        if: ${{ failure() }}

  build:
    name: Build
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - uses: android-actions/setup-android@v3
      - run: |
          echo "--- Running sdkmanager to install components ---"
          # Ensure both platforms AND build-tools are installed.
          # apksigner is part of build-tools.
          yes | sdkmanager 'platforms;android-34' 'build-tools;34.0.0' || { echo "sdkmanager failed. Check above logs for errors."; exit 1; }

          echo "--- Debugging PATH and Android SDK location ---"
          echo "ANDROID_HOME: ${ANDROID_HOME}"
          echo "Current PATH: $PATH"

          # List contents of the build-tools directory to see what versions are installed
          echo "Contents of ${ANDROID_HOME}/build-tools/:"
          ls -la "${ANDROID_HOME}/build-tools/"

          # Find the exact path to apksigner within build-tools
          APKSIGNER_EXEC=$(find "${ANDROID_HOME}/build-tools/" -name "apksigner" -type f -print -quit) # Use -print -quit to get first match and stop
          
          if [ -z "$APKSIGNER_EXEC" ]; then
            echo "ERROR: apksigner executable not found in any build-tools version!"
            exit 1
          else
            echo "Found apksigner executable at: $APKSIGNER_EXEC"
            echo "Permissions of apksigner:"
            ls -l "$APKSIGNER_EXEC"
            # Ensure it's executable (should be by default, but doesn't hurt to be sure)
            chmod +x "$APKSIGNER_EXEC"
          fi
          echo "--- End Debugging ---"
    #  - name: Decrypt keystore
    #    run: openssl aes-256-cbc -K ${{ secrets.ANDROID_KEYSTORE_SSL_KEY }} -iv ${{ secrets.ANDROID_KEYSTORE_SSL_IV }} -in pulsebridge.jks.enc -out pulsebridge.jks -d
      - name: Make gradlew executables
        run: chmod +x ./gradlew
      - run: make assemble-release
      
      - name: Build Release AAB
        run: ./gradlew bundleGenericRelease

      - name: Build Release APK
        run: ./gradlew assembleGenericRelease

      - name: Sign AAB with Jarsigner
        run: |
          # If your keypass is different from storepass, you'll need ANDROID_KEY_PASSWORD secret for it.
          jarsigner -keystore "${{ env.ANDROID_KEYSTORE_PATH }}" --storepass "${{ env.ANDROID_KEYSTORE_PASSWORD }}" ./build/outputs/bundle/genericRelease/*.aab key0
      
      - name: Sign APK with Apksigner
        run: |
          # If your keypass is different from storepass, you'll need ANDROID_KEY_PASSWORD secret for it.
           apksigner sign --ks "${{ env.ANDROID_KEYSTORE_PATH }}"  --ks-pass pass:"${{ env.ANDROID_KEYSTORE_PASSWORD }}"  --ks-key-alias key0  --key-pass pass:"${{ env.ANDROID_KEYSTORE_PASSWORD }}" ./build/outputs/apk/generic/release/*.apk

        env:
          GIT_TAG: SNAPSHOT
      - name: GitHub release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          token: ${{ secrets.MY_GITHUB_TOKEN }}
          draft: true
          files: |
            ./build/outputs/apk/generic/release/*.apk
            ./build/outputs/bundle/genericRelease/*.aab